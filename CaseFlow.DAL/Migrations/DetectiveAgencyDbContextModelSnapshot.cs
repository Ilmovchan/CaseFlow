// <auto-generated />
using System;
using CaseFlow.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CaseFlow.DAL.Migrations
{
    [DbContext(typeof(DetectiveAgencyDbContext))]
    partial class DetectiveAgencyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "approval_status", new[] { "Чернетка", "Надіслано", "Схвалено", "Відхилено" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "case_status", new[] { "Відкрито", "Закрито", "Призупинено" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "detective_status", new[] { "Активний(а)", "У відпустці", "У відставці", "Звільнений(а)" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "evidence_type", new[] { "Біометричний доказ", "Біологічний доказ", "Відеодоказ", "Фотодоказ", "Матеріальний доказ", "Цифровий доказ", "Документальний доказ", "Аудіодоказ", "Фізичний доказ", "Електронний доказ", "Інше" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CaseFlow.DAL.Models.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("case_type_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateOnly?>("CloseDate")
                        .HasColumnType("date")
                        .HasColumnName("close_date");

                    b.Property<DateOnly>("DeadlineDate")
                        .HasColumnType("date")
                        .HasColumnName("deadline_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("DetectiveId")
                        .HasColumnType("integer")
                        .HasColumnName("detective_id");

                    b.Property<DateOnly>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("case_status")
                        .HasDefaultValue("Відкрито")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DetectiveId");

                    b.ToTable("case", t =>
                        {
                            t.HasCheckConstraint("close_date_format", "close_date IS NULL OR close_date >= start_date");

                            t.HasCheckConstraint("deadline_format", "deadline_date >= start_date");
                        });
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.CaseEvidence", b =>
                {
                    b.Property<int>("EvidenceId")
                        .HasColumnType("integer")
                        .HasColumnName("evidence_id");

                    b.Property<int>("CaseId")
                        .HasColumnType("integer")
                        .HasColumnName("case_id");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("approval_status")
                        .HasDefaultValue("Чернетка")
                        .HasColumnName("approval_status");

                    b.HasKey("EvidenceId", "CaseId");

                    b.HasIndex("CaseId");

                    b.ToTable("case_evidence", t =>
                        {
                            t.HasTrigger("trg_prevent_last_case_evidence_unlink");
                        });
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.CaseSuspect", b =>
                {
                    b.Property<int>("SuspectId")
                        .HasColumnType("integer")
                        .HasColumnName("suspect_id");

                    b.Property<int>("CaseId")
                        .HasColumnType("integer")
                        .HasColumnName("case_id");

                    b.Property<string>("Alibi")
                        .HasColumnType("text")
                        .HasColumnName("alibi");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("approval_status")
                        .HasDefaultValue("Чернетка")
                        .HasColumnName("approval_status");

                    b.Property<bool>("IsInterrogated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_interrogated");

                    b.HasKey("SuspectId", "CaseId");

                    b.HasIndex("CaseId");

                    b.ToTable("case_suspect", t =>
                        {
                            t.HasTrigger("trg_prevent_last_case_suspect_unlink");
                        });
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.CaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("case_type", t =>
                        {
                            t.HasCheckConstraint("name_format", "name ~ '^[А-ЯІЇЄа-яіїє0-9\\s\\-.,:;/]+$'");

                            t.HasCheckConstraint("price_format", "price > 0");
                        });
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("integer")
                        .HasColumnName("apartment_number");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("building_number");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("city");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("father_name");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("region");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street");

                    b.HasKey("Id");

                    b.ToTable("client", t =>
                        {
                            t.HasCheckConstraint("apartment_number_format", "apartment_number IS NULL OR apartment_number > 0");

                            t.HasCheckConstraint("building_number_format", "building_number ~ '^[0-9/]+$'");

                            t.HasCheckConstraint("city_format", "city ~ '^[А-ЯІЇЄа-яіїє\\-]+$'");

                            t.HasCheckConstraint("date_of_birth_format", "date_of_birth <= CURRENT_DATE");

                            t.HasCheckConstraint("email_format", "email ~ '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'");

                            t.HasCheckConstraint("name_format", "first_name ~ '^[А-ЯІЇЄа-яіїє]+$' AND last_name ~ '^[А-ЯІЇЄа-яіїє]+$' AND (father_name IS NULL OR father_name ~ '^[А-ЯІЇЄа-яіїє]+$')");

                            t.HasCheckConstraint("phone_number_format", "phone_number ~ '^\\+380\\d{9}$'");

                            t.HasCheckConstraint("region_format", "region ~ '^[А-ЯІЇЄа-яіїє]+$'");

                            t.HasCheckConstraint("registration_date_format", "registration_date <= CURRENT_TIMESTAMP");

                            t.HasCheckConstraint("street_format", "street ~ '^[А-ЯІЇЄа-яіїє\\s\\-]+$'");
                        });
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Detective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("integer")
                        .HasColumnName("apartment_number");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("building_number");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("city");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("father_name");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("hire_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PersonalNotes")
                        .HasColumnType("text")
                        .HasColumnName("personal_notes");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("region");

                    b.Property<decimal>("Salary")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("salary");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("detective_status")
                        .HasDefaultValue("Активний(а)")
                        .HasColumnName("status");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street");

                    b.HasKey("Id");

                    b.ToTable("detective", t =>
                        {
                            t.HasCheckConstraint("apartment_number_format", "apartment_number IS NULL OR apartment_number > 0");

                            t.HasCheckConstraint("building_number_format", "building_number ~ '^[0-9/]+$'");

                            t.HasCheckConstraint("city_format", "city ~ '^[А-ЯІЇЄа-яіїє\\-]+$'");

                            t.HasCheckConstraint("date_of_birth_format", "date_of_birth <= CURRENT_DATE");

                            t.HasCheckConstraint("detective_hire_date_format", "hire_date <= CURRENT_DATE");

                            t.HasCheckConstraint("detective_salary_format", "salary >= 0");

                            t.HasCheckConstraint("email_format", "email ~ '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'");

                            t.HasCheckConstraint("name_format", "first_name ~ '^[А-ЯІЇЄа-яіїє]+$' AND last_name ~ '^[А-ЯІЇЄа-яіїє]+$' AND (father_name IS NULL OR father_name ~ '^[А-ЯІЇЄа-яіїє]+$')");

                            t.HasCheckConstraint("phone_number_format", "phone_number ~ '^\\+380\\d{9}$'");

                            t.HasCheckConstraint("region_format", "region ~ '^[А-ЯІЇЄа-яіїє]+$'");

                            t.HasCheckConstraint("street_format", "street ~ '^[А-ЯІЇЄа-яіїє\\s\\-]+$'");
                        });
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Evidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Annotation")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("annotation");

                    b.Property<DateTime>("CollectionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("collection_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Purpose")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("purpose");

                    b.Property<string>("Region")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasDefaultValue("Не вказано")
                        .HasColumnName("region");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("evidence_type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("evidence", t =>
                        {
                            t.HasCheckConstraint("collection_date_format", "collection_date <= CURRENT_TIMESTAMP");
                        });
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<string>("Annotation")
                        .HasColumnType("text")
                        .HasColumnName("annotation");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("approval_status")
                        .HasDefaultValue("Чернетка")
                        .HasColumnName("approval_status");

                    b.Property<int>("CaseId")
                        .HasColumnType("integer")
                        .HasColumnName("case_id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("purpose");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("expense", t =>
                        {
                            t.HasCheckConstraint("amount_format", "amount > 0");

                            t.HasCheckConstraint("date_time_format", "date_time <= CURRENT_TIMESTAMP");

                            t.HasCheckConstraint("purpose_format", "purpose ~ '^[А-ЯІЇЄа-яіїєA-Za-z0-9\\s\\-\\.,:;’]+$'");
                        });
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("approval_status")
                        .HasDefaultValue("Чернетка")
                        .HasColumnName("approval_status");

                    b.Property<int>("CaseId")
                        .HasColumnType("integer")
                        .HasColumnName("case_id");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("ReportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("report_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("report", t =>
                        {
                            t.HasCheckConstraint("date_format", "report_date <= CURRENT_TIMESTAMP");
                        });
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Suspect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("integer")
                        .HasColumnName("apartment_number");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("building_number");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("city");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("father_name");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nickname");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PhysicalDescription")
                        .HasColumnType("text")
                        .HasColumnName("physical_description");

                    b.Property<string>("PriorConvictions")
                        .HasColumnType("text")
                        .HasColumnName("prior_convictions");

                    b.Property<string>("Region")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("region");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("street");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("suspect", t =>
                        {
                            t.HasCheckConstraint("apartment_number_format", "apartment_number IS NULL OR apartment_number > 0");

                            t.HasCheckConstraint("building_number_format", "building_number ~ '^[0-9/]+$'");

                            t.HasCheckConstraint("city_format", "city ~ '^[А-ЯІЇЄа-яіїє\\-]+$'");

                            t.HasCheckConstraint("date_of_birth_format", "date_of_birth <= CURRENT_DATE");

                            t.HasCheckConstraint("name_format", "first_name ~ '^[А-ЯІЇЄа-яіїє]+$' AND last_name ~ '^[А-ЯІЇЄа-яіїє]+$' AND (father_name IS NULL OR father_name ~ '^[А-ЯІЇЄа-яіїє]+$')");

                            t.HasCheckConstraint("phone_number_format", "phone_number ~ '^\\+380\\d{9}$'");

                            t.HasCheckConstraint("region_format", "region ~ '^[А-ЯІЇЄа-яіїє]+$'");

                            t.HasCheckConstraint("street_format", "street ~ '^[А-ЯІЇЄа-яіїє\\s\\-]+$'");

                            t.HasCheckConstraint("weight_height_format", "weight IS NOT NULL AND weight > 0 AND height IS NOT NULL AND height > 0 OR weight IS NULL AND height IS NULL");
                        });
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Case", b =>
                {
                    b.HasOne("CaseFlow.DAL.Models.CaseType", "CaseType")
                        .WithMany("Cases")
                        .HasForeignKey("CaseTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_case_case_type_id");

                    b.HasOne("CaseFlow.DAL.Models.Client", "Client")
                        .WithMany("Cases")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_case_client_id");

                    b.HasOne("CaseFlow.DAL.Models.Detective", "Detective")
                        .WithMany("Cases")
                        .HasForeignKey("DetectiveId")
                        .HasConstraintName("FK_case_detective_id");

                    b.Navigation("CaseType");

                    b.Navigation("Client");

                    b.Navigation("Detective");
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.CaseEvidence", b =>
                {
                    b.HasOne("CaseFlow.DAL.Models.Case", "Case")
                        .WithMany("CaseEvidences")
                        .HasForeignKey("CaseId")
                        .IsRequired()
                        .HasConstraintName("FK_case_evidence_case_id");

                    b.HasOne("CaseFlow.DAL.Models.Evidence", "Evidence")
                        .WithMany("CaseEvidences")
                        .HasForeignKey("EvidenceId")
                        .IsRequired()
                        .HasConstraintName("FK_case_evidence_suspect_id");

                    b.Navigation("Case");

                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.CaseSuspect", b =>
                {
                    b.HasOne("CaseFlow.DAL.Models.Case", "Case")
                        .WithMany("CaseSuspects")
                        .HasForeignKey("CaseId")
                        .IsRequired()
                        .HasConstraintName("FK_case_suspect_case_id");

                    b.HasOne("CaseFlow.DAL.Models.Suspect", "Suspect")
                        .WithMany("CaseSuspects")
                        .HasForeignKey("SuspectId")
                        .IsRequired()
                        .HasConstraintName("FK_case_suspect_suspect_id");

                    b.Navigation("Case");

                    b.Navigation("Suspect");
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Expense", b =>
                {
                    b.HasOne("CaseFlow.DAL.Models.Case", "Case")
                        .WithMany("Expenses")
                        .HasForeignKey("CaseId")
                        .IsRequired()
                        .HasConstraintName("expense_case_id_fk");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Report", b =>
                {
                    b.HasOne("CaseFlow.DAL.Models.Case", "Case")
                        .WithMany("Reports")
                        .HasForeignKey("CaseId")
                        .IsRequired()
                        .HasConstraintName("FK_report_case_id");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Case", b =>
                {
                    b.Navigation("CaseEvidences");

                    b.Navigation("CaseSuspects");

                    b.Navigation("Expenses");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.CaseType", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Client", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Detective", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Evidence", b =>
                {
                    b.Navigation("CaseEvidences");
                });

            modelBuilder.Entity("CaseFlow.DAL.Models.Suspect", b =>
                {
                    b.Navigation("CaseSuspects");
                });
#pragma warning restore 612, 618
        }
    }
}
